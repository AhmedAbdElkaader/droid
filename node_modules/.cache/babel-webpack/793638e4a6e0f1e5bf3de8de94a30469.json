{"ast":null,"code":"import _classCallCheck from \"/Users/bebbeb/Desktop/cgProduct/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/bebbeb/Desktop/cgProduct/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { Component, ElementRef, Renderer2, Input, ViewChild, ViewChildren, HostListener, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\nvar NgxNewstickerAlbeComponent = /*#__PURE__*/function () {\n  /**\r\n   * @param {?} elementRef\r\n   * @param {?} renderer\r\n   */\n  function NgxNewstickerAlbeComponent(elementRef, renderer) {\n    _classCallCheck(this, NgxNewstickerAlbeComponent);\n\n    this.elementRef = elementRef;\n    this.renderer = renderer; // Highlighted text.\n\n    this.title = ''; // List of messages to be displayed.\n\n    this.events = []; // Set the time interval between the text exchange.\n\n    this.interval = 3000; // Sets the current count visibility.\n\n    this.showCounter = true;\n    this.ACTIONS = {\n      'NEXT': 1,\n      'PREV': -1\n    };\n    this.position = -1;\n  }\n  /**\r\n   * @return {?}\r\n   */\n\n\n  _createClass(NgxNewstickerAlbeComponent, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      this.autoNavigate();\n      this.navigate('NEXT'); // initialize\n    }\n    /**\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"ngAfterViewInit\",\n    value: function ngAfterViewInit() {\n      var _this = this;\n\n      this.defaultColor = this.defaultColor || '#1976D2'; // this.elementRef.nativeElement.style.backgroundColor = this.backgroundColor;\n\n      this.renderer.setStyle(this.ntRef.nativeElement, 'background-color', this.backColor || '#FFFFFF');\n      this.renderer.setStyle(this.ntRef.nativeElement, 'border-color', this.defaultColor);\n\n      if (this.ntCounterRef) {\n        this.renderer.setStyle(this.ntCounterRef.nativeElement, 'background-color', this.defaultColor);\n      }\n\n      if (this.ntTitleRef) {\n        this.renderer.setStyle(this.ntTitleRef.nativeElement, 'background-color', this.defaultColor);\n        this.renderer.setStyle(this.nDart.nativeElement, 'border-left-color', this.defaultColor);\n      }\n\n      this.ntNaviRef.forEach(\n      /**\r\n      * @param {?} item\r\n      * @return {?}\r\n      */\n      function (item) {\n        _this.renderer.setStyle(item.nativeElement, 'border-color', _this.defaultColor);\n      });\n    }\n    /**\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"onMouseOver\",\n    value: function onMouseOver() {\n      clearInterval(this.autoNext);\n    }\n    /**\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"onMouseLeave\",\n    value: function onMouseLeave() {\n      this.autoNavigate();\n    }\n    /**\r\n     * @private\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"autoNavigate\",\n    value: function autoNavigate() {\n      var _this2 = this;\n\n      if (this.interval > 0) {\n        this.autoNext = setInterval(\n        /**\r\n        * @return {?}\r\n        */\n        function () {\n          return _this2.navigate('NEXT');\n        }, this.interval);\n      } else {\n        clearInterval(this.autoNext);\n      }\n    }\n    /**\r\n     * @param {?} action\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"navigate\",\n    value: function navigate(action) {\n      if (typeof this.ACTIONS[action] === 'undefined') {\n        return;\n      }\n      /** @type {?} */\n\n\n      var shift = this.ACTIONS[action];\n      this.position = this.position + shift;\n\n      if (this.events) {\n        if (this.position < 0) {\n          this.position = this.events.length - 1;\n        } else if (this.position >= this.events.length) {\n          this.position = 0;\n        }\n\n        this.item = this.events[this.position];\n        this.current = \"\".concat(this.position + 1, \"/\").concat(this.events.length);\n      }\n    }\n  }]);\n\n  return NgxNewstickerAlbeComponent;\n}();\n\nNgxNewstickerAlbeComponent.decorators = [{\n  type: Component,\n  args: [{\n    // tslint:disable-next-line:component-selector\n    selector: 'ngx-newsticker',\n    template: \"<div #nt class=\\\"newsticker\\\">\\r\\n  <small #ntCounter class=\\\"nt-counter\\\" *ngIf=\\\"showCounter\\\">{{current}}</small>\\r\\n  <div #ntTitle class=\\\"nt-title\\\">\\r\\n    <h2>{{title}}</h2>\\r\\n    <span #nDart></span>\\r\\n  </div>\\r\\n  <div class=\\\"nt-content\\\">\\r\\n    <label [innerHTML]=\\\"item\\\"></label>\\r\\n  </div>\\r\\n  <div class=\\\"nt-navi\\\">\\r\\n    <span (click)=\\\"navigate('PREV')\\\">\\r\\n      <i #ntNavi class=\\\"arrow-left\\\"></i>\\r\\n    </span>\\r\\n    <span (click)=\\\"navigate('NEXT')\\\">\\r\\n      <i #ntNavi class=\\\"arrow-right\\\"></i>\\r\\n    </span>\\r\\n  </div>\\r\\n</div>\\r\\n\",\n    styles: [\".newsticker{width:100%;height:40px;background-color:#fff;position:relative;border:1px solid #1976d2}.newsticker>.nt-counter{position:absolute;top:-20px;right:-1px;padding:5px;background-color:#1976d2;color:#fff}.newsticker>.nt-title{width:auto;max-width:180px;height:40px;display:inline-block;background-color:#1976d2;position:relative;text-transform:uppercase}.newsticker>.nt-title>h2{display:inline-block;margin:0;padding:0 15px;line-height:40px;font-size:18px;color:#fff;height:40px;box-sizing:border-box;overflow:hidden;font-weight:lighter}.newsticker>.nt-title>span{width:0;position:absolute;right:-10px;top:10px;height:0;border-style:solid;border-width:10px 0 10px 10px;border-color:transparent transparent transparent #1976d2}.newsticker>.nt-content{padding:0;margin:0;position:absolute;top:0;left:200px;right:40px;height:40px;font-size:16px}.newsticker>.nt-content>label{position:absolute;height:40px;width:100%;line-height:40px;text-decoration:none;color:#333;overflow:hidden;display:block;white-space:nowrap;text-overflow:ellipsis;font-weight:400}.newsticker>.nt-navi{width:50px;height:40px;position:absolute;right:0;top:0;opacity:.1}.newsticker>.nt-navi>span{width:25px;height:40px;position:absolute;cursor:pointer}.newsticker>.nt-navi>span:first-child{left:0}.newsticker>.nt-navi>span:last-child{right:0}.newsticker>.nt-navi>span>i{border:solid #1976d2;border-width:0 2px 2px 0;display:inline-block;padding:6px;position:absolute;top:13px;opacity:.5}.newsticker>.nt-navi>span>i.arrow-right{transform:rotate(-45deg);-webkit-transform:rotate(-45deg)}.newsticker>.nt-navi>span>i.arrow-left{transform:rotate(135deg);-webkit-transform:rotate(135deg);left:10px}.newsticker:hover .nt-navi{opacity:1}.newsticker>.nt-content>label,.newsticker>.nt-navi,.newsticker>.nt-navi>span{transition:.25s linear;-moz-transition:.25s linear;-webkit-transition:.25s linear}\"]\n  }]\n}];\n/** @nocollapse */\n\nNgxNewstickerAlbeComponent.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: Renderer2\n  }];\n};\n\nNgxNewstickerAlbeComponent.propDecorators = {\n  title: [{\n    type: Input\n  }],\n  events: [{\n    type: Input\n  }],\n  interval: [{\n    type: Input\n  }],\n  showCounter: [{\n    type: Input\n  }],\n  defaultColor: [{\n    type: Input\n  }],\n  backColor: [{\n    type: Input\n  }],\n  ntRef: [{\n    type: ViewChild,\n    args: ['nt', {\n      static: true\n    }]\n  }],\n  ntCounterRef: [{\n    type: ViewChild,\n    args: ['ntCounter', {\n      static: true\n    }]\n  }],\n  ntTitleRef: [{\n    type: ViewChild,\n    args: ['ntTitle', {\n      static: true\n    }]\n  }],\n  nDart: [{\n    type: ViewChild,\n    args: ['nDart', {\n      static: true\n    }]\n  }],\n  ntNaviRef: [{\n    type: ViewChildren,\n    args: ['ntNavi']\n  }],\n  onMouseOver: [{\n    type: HostListener,\n    args: ['mouseover']\n  }],\n  onMouseLeave: [{\n    type: HostListener,\n    args: ['mouseleave']\n  }]\n};\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\nvar NgxNewstickerAlbeModule = function NgxNewstickerAlbeModule() {\n  _classCallCheck(this, NgxNewstickerAlbeModule);\n};\n\nNgxNewstickerAlbeModule.decorators = [{\n  type: NgModule,\n  args: [{\n    imports: [CommonModule],\n    declarations: [NgxNewstickerAlbeComponent],\n    exports: [NgxNewstickerAlbeComponent]\n  }]\n}];\nexport { NgxNewstickerAlbeComponent, NgxNewstickerAlbeModule };","map":{"version":3,"sources":["ng://ngx-newsticker-albe/lib/ngx-newsticker-albe.component.ts","ng://ngx-newsticker-albe/lib/ngx-newsticker-albe.module.ts"],"names":[],"mappings":"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","sourcesContent":["import { CommonModule } from '@angular/common';\r\nimport {\r\n  Component,\r\n  OnInit,\r\n  Input,\r\n  ElementRef,\r\n  AfterViewInit,\r\n  Renderer2,\r\n  QueryList,\r\n  ViewChild,\r\n  ViewChildren,\r\n  HostListener\r\n} from '@angular/core';\r\n\r\n@Component({\r\n  // tslint:disable-next-line:component-selector\r\n  selector: 'ngx-newsticker',\r\n  templateUrl: './ngx-newsticker-albe.component.html',\r\n  styleUrls: ['./ngx-newsticker-albe.component.scss']\r\n})\r\nexport class NgxNewstickerAlbeComponent implements OnInit, AfterViewInit {\r\n  // Highlighted text.\r\n  @Input() title = '';\r\n  // List of messages to be displayed.\r\n  @Input() events: Array<string> = [];\r\n  // Set the time interval between the text exchange.\r\n  @Input() interval = 3000;\r\n  // Sets the current count visibility.\r\n  @Input() showCounter = true;\r\n  // Change the default blue color.\r\n  @Input() defaultColor: string;\r\n  // Change the back ground color of content.\r\n  @Input() backColor: string;\r\n\r\n  @ViewChild('nt', {static: true}) private ntRef: ElementRef;\r\n  @ViewChild('ntCounter', {static: true}) private ntCounterRef: ElementRef;\r\n  @ViewChild('ntTitle', {static: true}) private ntTitleRef: ElementRef;\r\n  @ViewChild('nDart', {static: true}) private nDart: ElementRef;\r\n  @ViewChildren('ntNavi') ntNaviRef: QueryList<ElementRef>;\r\n\r\n  private ACTIONS = {\r\n    'NEXT': 1,\r\n    'PREV': -1\r\n  };\r\n\r\n  autoNext: any;\r\n  item: string;\r\n  current: string;\r\n  position = -1;\r\n\r\n  constructor(\r\n    private elementRef: ElementRef,\r\n    private renderer: Renderer2) { }\r\n\r\n  ngOnInit() {\r\n    this.autoNavigate();\r\n    this.navigate('NEXT'); // initialize\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    this.defaultColor = this.defaultColor || '#1976D2';\r\n\r\n    // this.elementRef.nativeElement.style.backgroundColor = this.backgroundColor;\r\n    this.renderer.setStyle(this.ntRef.nativeElement, 'background-color', this.backColor || '#FFFFFF');\r\n    this.renderer.setStyle(this.ntRef.nativeElement, 'border-color', this.defaultColor);\r\n\r\n    if (this.ntCounterRef) {\r\n      this.renderer.setStyle(this.ntCounterRef.nativeElement, 'background-color', this.defaultColor);\r\n    }\r\n\r\n    if (this.ntTitleRef) {\r\n      this.renderer.setStyle(this.ntTitleRef.nativeElement, 'background-color', this.defaultColor);\r\n      this.renderer.setStyle(this.nDart.nativeElement, 'border-left-color', this.defaultColor);\r\n    }\r\n\r\n    this.ntNaviRef.forEach(item => {\r\n      this.renderer.setStyle(item.nativeElement, 'border-color', this.defaultColor);\r\n    });\r\n\r\n  }\r\n\r\n  @HostListener('mouseover')\r\n  onMouseOver() {\r\n    clearInterval(this.autoNext);\r\n  }\r\n\r\n  @HostListener('mouseleave')\r\n  onMouseLeave() {\r\n    this.autoNavigate();\r\n  }\r\n\r\n  private autoNavigate() {\r\n    if (this.interval > 0) {\r\n      this.autoNext = setInterval(() => this.navigate('NEXT'), this.interval);\r\n    } else {\r\n      clearInterval(this.autoNext);\r\n    }\r\n  }\r\n\r\n  public navigate(action: string) {\r\n    if (typeof this.ACTIONS[action] === 'undefined') {\r\n      return;\r\n    }\r\n\r\n    const shift = this.ACTIONS[action];\r\n    this.position = this.position + shift;\r\n\r\n    if (this.events) {\r\n      if (this.position < 0) {\r\n        this.position = this.events.length - 1;\r\n      } else if (this.position >= this.events.length) {\r\n        this.position = 0;\r\n      }\r\n\r\n      this.item = this.events[this.position];\r\n      this.current = `${(this.position + 1)}/${this.events.length}`;\r\n    }\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { NgxNewstickerAlbeComponent } from './ngx-newsticker-albe.component';\r\n\r\n@NgModule({\r\n  imports: [CommonModule],\r\n  declarations: [NgxNewstickerAlbeComponent],\r\n  exports: [NgxNewstickerAlbeComponent]\r\n})\r\nexport class NgxNewstickerAlbeModule { }\r\n"]},"metadata":{},"sourceType":"module"}