/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, ElementRef, Renderer2, QueryList, ViewChild, ViewChildren, HostListener } from '@angular/core';
export class NgxNewstickerAlbeComponent {
    /**
     * @param {?} elementRef
     * @param {?} renderer
     */
    constructor(elementRef, renderer) {
        this.elementRef = elementRef;
        this.renderer = renderer;
        // Highlighted text.
        this.title = '';
        // List of messages to be displayed.
        this.events = [];
        // Set the time interval between the text exchange.
        this.interval = 3000;
        // Sets the current count visibility.
        this.showCounter = true;
        this.ACTIONS = {
            'NEXT': 1,
            'PREV': -1
        };
        this.position = -1;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.autoNavigate();
        this.navigate('NEXT'); // initialize
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.defaultColor = this.defaultColor || '#1976D2';
        // this.elementRef.nativeElement.style.backgroundColor = this.backgroundColor;
        this.renderer.setStyle(this.ntRef.nativeElement, 'background-color', this.backColor || '#FFFFFF');
        this.renderer.setStyle(this.ntRef.nativeElement, 'border-color', this.defaultColor);
        if (this.ntCounterRef) {
            this.renderer.setStyle(this.ntCounterRef.nativeElement, 'background-color', this.defaultColor);
        }
        if (this.ntTitleRef) {
            this.renderer.setStyle(this.ntTitleRef.nativeElement, 'background-color', this.defaultColor);
            this.renderer.setStyle(this.nDart.nativeElement, 'border-left-color', this.defaultColor);
        }
        this.ntNaviRef.forEach((/**
         * @param {?} item
         * @return {?}
         */
        item => {
            this.renderer.setStyle(item.nativeElement, 'border-color', this.defaultColor);
        }));
    }
    /**
     * @return {?}
     */
    onMouseOver() {
        clearInterval(this.autoNext);
    }
    /**
     * @return {?}
     */
    onMouseLeave() {
        this.autoNavigate();
    }
    /**
     * @private
     * @return {?}
     */
    autoNavigate() {
        if (this.interval > 0) {
            this.autoNext = setInterval((/**
             * @return {?}
             */
            () => this.navigate('NEXT')), this.interval);
        }
        else {
            clearInterval(this.autoNext);
        }
    }
    /**
     * @param {?} action
     * @return {?}
     */
    navigate(action) {
        if (typeof this.ACTIONS[action] === 'undefined') {
            return;
        }
        /** @type {?} */
        const shift = this.ACTIONS[action];
        this.position = this.position + shift;
        if (this.events) {
            if (this.position < 0) {
                this.position = this.events.length - 1;
            }
            else if (this.position >= this.events.length) {
                this.position = 0;
            }
            this.item = this.events[this.position];
            this.current = `${(this.position + 1)}/${this.events.length}`;
        }
    }
}
NgxNewstickerAlbeComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line:component-selector
                selector: 'ngx-newsticker',
                template: "<div #nt class=\"newsticker\">\r\n  <small #ntCounter class=\"nt-counter\" *ngIf=\"showCounter\">{{current}}</small>\r\n  <div #ntTitle class=\"nt-title\">\r\n    <h2>{{title}}</h2>\r\n    <span #nDart></span>\r\n  </div>\r\n  <div class=\"nt-content\">\r\n    <label [innerHTML]=\"item\"></label>\r\n  </div>\r\n  <div class=\"nt-navi\">\r\n    <span (click)=\"navigate('PREV')\">\r\n      <i #ntNavi class=\"arrow-left\"></i>\r\n    </span>\r\n    <span (click)=\"navigate('NEXT')\">\r\n      <i #ntNavi class=\"arrow-right\"></i>\r\n    </span>\r\n  </div>\r\n</div>\r\n",
                styles: [".newsticker{width:100%;height:40px;background-color:#fff;position:relative;border:1px solid #1976d2}.newsticker>.nt-counter{position:absolute;top:-20px;right:-1px;padding:5px;background-color:#1976d2;color:#fff}.newsticker>.nt-title{width:auto;max-width:180px;height:40px;display:inline-block;background-color:#1976d2;position:relative;text-transform:uppercase}.newsticker>.nt-title>h2{display:inline-block;margin:0;padding:0 15px;line-height:40px;font-size:18px;color:#fff;height:40px;box-sizing:border-box;overflow:hidden;font-weight:lighter}.newsticker>.nt-title>span{width:0;position:absolute;right:-10px;top:10px;height:0;border-style:solid;border-width:10px 0 10px 10px;border-color:transparent transparent transparent #1976d2}.newsticker>.nt-content{padding:0;margin:0;position:absolute;top:0;left:200px;right:40px;height:40px;font-size:16px}.newsticker>.nt-content>label{position:absolute;height:40px;width:100%;line-height:40px;text-decoration:none;color:#333;overflow:hidden;display:block;white-space:nowrap;text-overflow:ellipsis;font-weight:400}.newsticker>.nt-navi{width:50px;height:40px;position:absolute;right:0;top:0;opacity:.1}.newsticker>.nt-navi>span{width:25px;height:40px;position:absolute;cursor:pointer}.newsticker>.nt-navi>span:first-child{left:0}.newsticker>.nt-navi>span:last-child{right:0}.newsticker>.nt-navi>span>i{border:solid #1976d2;border-width:0 2px 2px 0;display:inline-block;padding:6px;position:absolute;top:13px;opacity:.5}.newsticker>.nt-navi>span>i.arrow-right{transform:rotate(-45deg);-webkit-transform:rotate(-45deg)}.newsticker>.nt-navi>span>i.arrow-left{transform:rotate(135deg);-webkit-transform:rotate(135deg);left:10px}.newsticker:hover .nt-navi{opacity:1}.newsticker>.nt-content>label,.newsticker>.nt-navi,.newsticker>.nt-navi>span{transition:.25s linear;-moz-transition:.25s linear;-webkit-transition:.25s linear}"]
            }] }
];
/** @nocollapse */
NgxNewstickerAlbeComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
NgxNewstickerAlbeComponent.propDecorators = {
    title: [{ type: Input }],
    events: [{ type: Input }],
    interval: [{ type: Input }],
    showCounter: [{ type: Input }],
    defaultColor: [{ type: Input }],
    backColor: [{ type: Input }],
    ntRef: [{ type: ViewChild, args: ['nt', { static: true },] }],
    ntCounterRef: [{ type: ViewChild, args: ['ntCounter', { static: true },] }],
    ntTitleRef: [{ type: ViewChild, args: ['ntTitle', { static: true },] }],
    nDart: [{ type: ViewChild, args: ['nDart', { static: true },] }],
    ntNaviRef: [{ type: ViewChildren, args: ['ntNavi',] }],
    onMouseOver: [{ type: HostListener, args: ['mouseover',] }],
    onMouseLeave: [{ type: HostListener, args: ['mouseleave',] }]
};
if (false) {
    /** @type {?} */
    NgxNewstickerAlbeComponent.prototype.title;
    /** @type {?} */
    NgxNewstickerAlbeComponent.prototype.events;
    /** @type {?} */
    NgxNewstickerAlbeComponent.prototype.interval;
    /** @type {?} */
    NgxNewstickerAlbeComponent.prototype.showCounter;
    /** @type {?} */
    NgxNewstickerAlbeComponent.prototype.defaultColor;
    /** @type {?} */
    NgxNewstickerAlbeComponent.prototype.backColor;
    /**
     * @type {?}
     * @private
     */
    NgxNewstickerAlbeComponent.prototype.ntRef;
    /**
     * @type {?}
     * @private
     */
    NgxNewstickerAlbeComponent.prototype.ntCounterRef;
    /**
     * @type {?}
     * @private
     */
    NgxNewstickerAlbeComponent.prototype.ntTitleRef;
    /**
     * @type {?}
     * @private
     */
    NgxNewstickerAlbeComponent.prototype.nDart;
    /** @type {?} */
    NgxNewstickerAlbeComponent.prototype.ntNaviRef;
    /**
     * @type {?}
     * @private
     */
    NgxNewstickerAlbeComponent.prototype.ACTIONS;
    /** @type {?} */
    NgxNewstickerAlbeComponent.prototype.autoNext;
    /** @type {?} */
    NgxNewstickerAlbeComponent.prototype.item;
    /** @type {?} */
    NgxNewstickerAlbeComponent.prototype.current;
    /** @type {?} */
    NgxNewstickerAlbeComponent.prototype.position;
    /**
     * @type {?}
     * @private
     */
    NgxNewstickerAlbeComponent.prototype.elementRef;
    /**
     * @type {?}
     * @private
     */
    NgxNewstickerAlbeComponent.prototype.renderer;
}
//# sourceMappingURL=data:application/json;base64,